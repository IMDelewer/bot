#!/bin/bash

set -e

# === Config ===
GITHUB_RAW_BASE="https://raw.githubusercontent.com/imdelewer/bot/main"
MAIN_PY_URL="$GITHUB_RAW_BASE/main.py"
REQS_URL="$GITHUB_RAW_BASE/requirements.txt"

INSTALL_DIR="/usr/local/bin/bot"
TARGET_VERSION="3.12.0"
REQUIRED_VERSION="3.10"

# === Colors ===
GREEN='\033[1;32m'
YELLOW='\033[1;33m'
RED='\033[1;31m'
NC='\033[0m'

log() { echo -e "${GREEN}[INFO]${NC} $1"; }
warn() { echo -e "${YELLOW}[WARN]${NC} $1"; }
error() { echo -e "${RED}[ERROR]${NC} $1"; }

# === 1. Python version check ===
log "Checking current Python version..."
CURRENT_VERSION=$(python3 -c 'import sys; print(".".join(map(str, sys.version_info[:3])))')
log "Detected Python version: $CURRENT_VERSION"

if [[ "$(printf '%s\n' "$REQUIRED_VERSION" "$CURRENT_VERSION" | sort -V | head -n1)" != "$REQUIRED_VERSION" ]]; then
  log "Python < $REQUIRED_VERSION found. Installing Python $TARGET_VERSION..."

  apt update
  apt install -y wget build-essential zlib1g-dev libncurses5-dev libgdbm-dev libnss3-dev \
    libssl-dev libreadline-dev libffi-dev curl libbz2-dev libsqlite3-dev liblzma-dev

  cd /usr/src
  wget -nc "https://www.python.org/ftp/python/$TARGET_VERSION/Python-$TARGET_VERSION.tgz"
  tar -xf "Python-$TARGET_VERSION.tgz"
  cd "Python-$TARGET_VERSION"
  ./configure --enable-optimizations
  make -j$(nproc)
  make altinstall

  PYTHON_BIN="/usr/local/bin/python3.12"
else
  PYTHON_BIN=$(which python3)
  log "Python is up to date. Using $PYTHON_BIN"
fi

# === 2. Setup directory & virtual environment ===
log "Creating bot directory at $INSTALL_DIR..."
mkdir -p "$INSTALL_DIR"
cd "$INSTALL_DIR"

log "Creating virtual environment..."
$PYTHON_BIN -m venv venv
source venv/bin/activate

log "Upgrading pip..."
pip install --upgrade pip

# === 3. Download project files ===
log "Downloading main.py from GitHub..."
wget -O main.py "$MAIN_PY_URL" || { error "Failed to download main.py"; exit 1; }

log "Downloading requirements.txt from GitHub..."
wget -O requirements.txt "$REQS_URL" || { error "Failed to download requirements.txt"; exit 1; }

# === 4. Install Python deps ===
log "Installing Python dependencies from requirements.txt..."
pip install -r requirements.txt

# === 5. Prompt for token & paths ===
read -p "Enter your bot TOKEN: " BOT_TOKEN
read -p "Enter path to servers folder (MAPS): " MAPS_PATH
read -p "Enter path to accounts folder (ACC): " ACC_PATH

# === 6. Prompt for server folders (array) ===
log "Enter the names of server folders (comma separated)..."
echo "Example: 'folder1, folder2, folder3'"
read -p "Enter server folders: " SERVERS_FOLDERS

# Format input into Python list format ["folder1", "folder2"]
IFS=',' read -r -a SERVERS_ARRAY <<< "$SERVERS_FOLDERS"
SERVERS_LIST="["

for i in "${SERVERS_ARRAY[@]}"; do
  SERVERS_LIST="$SERVERS_LIST\"${i// /}\", "
done

SERVERS_LIST="${SERVERS_LIST%, }]" # Remove last comma and close list

# === 7. Inject values into main.py ===
log "Injecting config values into main.py..."
sed -i "s|TOKEN *= *.*|TOKEN = \"$BOT_TOKEN\"|" main.py
sed -i "s|MAPS_FOLDERS *= *.*|MAPS_FOLDERS = \"$MAPS_PATH\"|" main.py
sed -i "s|ACC_FOLDER *= *.*|ACC_FOLDER = \"$ACC_PATH\"|" main.py
sed -i "s|servers = \[\]|servers = $SERVERS_LIST|" main.py

# === 8. Create systemd service ===
SERVICE_FILE="/etc/systemd/system/bot.service"
log "Creating systemd service..."

cat > "$SERVICE_FILE" <<EOF
[Unit]
Description=Telegram Bot Service
After=network.target

[Service]
Type=simple
User=root
WorkingDirectory=$INSTALL_DIR
ExecStart=$INSTALL_DIR/venv/bin/python3 main.py
Restart=always

[Install]
WantedBy=multi-user.target
EOF

log "Reloading systemd..."
systemctl daemon-reexec
systemctl daemon-reload
systemctl enable bot.service
systemctl start bot.service

log "Bot service started!"

# === 9. Check service status ===
systemctl status bot.service --no-pager
